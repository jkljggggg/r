# coding=utf-8
import nest_asyncio
nest_asyncio.apply()

import asyncio
import time
import sys
import logging
from datetime import datetime, timedelta
import subprocess # For executing shell commands (git pull)
import random # For dynamic welcome messages

# MongoDB
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, OperationFailure

# Enable logging to see bot activities on console
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

from telegram import Update, ChatPermissions, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from telegram.constants import ParseMode # Import ParseMode for Markdown V2

# --- Configuration ---
TOKEN = "8100559127:AAFyDgLMXb3kOEXgTXK2vLKUkN_Ix3vR9E"  # Replace with your actual token
OWNER = "@Rajaraj909" # Bot ka owner username (username, NOT ID)

# MongoDB Configuration
MONGO_URI = "mongodb+srv://pusers:nycreation@nycreation.pd4klp1.mongodb.net/?retryWrites=true&w=majority&appName=NYCREATION" # Replace with your MongoDB connection string (e.g., from Atlas)
DB_NAME = "RoseBotDB"

# ** Sticker IDs (Replace with your actual sticker file IDs) **
# IMPORTANT: Replace this with a valid sticker file ID. If not, sticker sending will fail.
DEFAULT_JOIN_STICKER_ID = "CAACAgIAAxkBAAIC3mWZ7WvQzQe5F2l3b3sQ2M1d4QABfQACaQMAAm2YgUrpL" # Placeholder, replace with a real sticker ID

# --- Database Setup ---
def get_db_collection(collection_name):
    """Initializes and returns a MongoDB collection."""
    try:
        client = MongoClient(MONGO_URI)
        db = client[DB_NAME]
        return db[collection_name]
    except ConnectionFailure as e:
        logger.error(f"MongoDB connection failed: {e}")
        return None
    except OperationFailure as e:
        logger.error(f"MongoDB operation failed: {e}")
        return None

# Collections
warns_collection = get_db_collection("warns")
rules_collection = get_db_collection("rules")
welcomes_collection = get_db_collection("welcomes")
global_bans_collection = get_db_collection("global_bans") # For global bans
chat_settings_collection = get_db_collection("chat_settings") # To store settings like autolink

# --- Utility Functions ---
def escape_markdown_v2(text):
    """Helper function to escape characters for MarkdownV2 parse mode."""
    if not isinstance(text, str):
        text = str(text)
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return "".join(["\\" + char if char in escape_chars else char for char in text])

async def is_admin_or_owner(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> bool:
    """Checks if the user is an admin in the chat or the bot's owner."""
    if user_id == context.bot.id: # Bot itself is considered admin for its own actions
        return True

    # Check if the user is the bot's designated owner by username
    if update.effective_user.username and update.effective_user.username.lower() == OWNER.lstrip('@').lower():
        return True
    
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status in ["creator", "administrator"]:
            return True
    except Exception as e:
        logger.debug(f"Could not get chat member status for {user_id} in {chat_id}: {e}")
        # If bot can't get chat member (e.g., user left, or bot not admin), treat as not admin
        return False
    
    return False

async def _get_user_display_info(user) -> dict:
    """
    Fetches user's display name, username, and profile picture.
    Returns a dictionary with 'full_name', 'username', 'user_id', 'profile_pic_file_id'.
    """
    full_name = escape_markdown_v2(user.full_name)
    username = escape_markdown_v2(f"@{user.username}") if user.username else "_N/A_"
    user_id = user.id
    profile_pic_file_id = None

    try:
        photos = await user.get_profile_photos(limit=1)
        if photos.photos and photos.photos[0]:
            # Get the largest available photo size
            largest_photo = max(photos.photos[0], key=lambda p: p.width * p.height)
            profile_pic_file_id = largest_photo.file_id
    except Exception as e:
        logger.warning(f"Could not fetch profile picture for user {user.id}: {e}")
        # If fetching fails, we'll just proceed without the picture

    return {
        "full_name": full_name,
        "username": username,
        "user_id": user_id,
        "profile_pic_file_id": profile_pic_file_id
    }

# --- Bot Commands and Handlers ---

# START COMMAND
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    user_info = await _get_user_display_info(user)

    # Prepare user identity string
    identity_parts = []
    identity_parts.append(f"*рдирд╛рдо:* {user_info['full_name']}")
    identity_parts.append(f"*рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо:* {user_info['username']}")
    identity_parts.append(f"*рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID:* `{user_info['user_id']}`")
    user_identity_str = escape_markdown_v2(" | ").join(identity_parts)

    if chat.type == "private":
        # Send profile picture first if available
        if user_info['profile_pic_file_id']:
            try:
                await update.message.reply_photo(
                    photo=user_info['profile_pic_file_id'],
                    caption=f"ЁЯМЯ рдЖрдк рдпрд╣рд╛рдБ рд╣реИрдВ, рдПрдХ рдЪрдордХрддреЗ рд╕рд┐рддрд╛рд░реЗ рдХреА рддрд░рд╣!\n\n{user_identity_str}\n\n",
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e:
                logger.error(f"Error sending profile picture for user {user.id}: {e}")
                # Fallback to just text if photo sending fails
                await update.message.reply_text(
                    f"ЁЯМЯ рдЖрдк рдпрд╣рд╛рдБ рд╣реИрдВ, рдПрдХ рдЪрдордХрддреЗ рд╕рд┐рддрд╛рд░реЗ рдХреА рддрд░рд╣!\n\n{user_identity_str}\n\n",
                    parse_mode=ParseMode.MARKDOWN_V2
                )
        else:
            await update.message.reply_text(
                f"ЁЯМЯ рдЖрдк рдпрд╣рд╛рдБ рд╣реИрдВ, рдПрдХ рдЪрдордХрддреЗ рд╕рд┐рддрд╛рд░реЗ рдХреА рддрд░рд╣!\n\n{user_identity_str}\n\n",
                parse_mode=ParseMode.MARKDOWN_V2
            )

        await update.message.reply_text(
            f"рдореИрдВ *рд░реЛрдЬ*, рдЖрдкрдХреЗ рдЪреИрдЯреНрд╕ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рдФрд░ рд╡реНрдпрд╡рд╕реНрдерд┐рдд рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдбрд┐рдЬрд╝рд╛рдЗрди рдХрд┐рдпрд╛ рдЧрдпрд╛ рдПрдХ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдЧреНрд░реБрдк рдореИрдиреЗрдЬрдореЗрдВрдЯ рдмреЙрдЯ рд╣реВрдБ!\n"
            f"рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ:\n"
            f"тЬи рдореЙрдбрд░реЗрдЯрд┐рдВрдЧ рдЯреВрд▓реНрд╕ рдЬреИрд╕реЗ рдХрд┐ рдмреИрди, рдХрд┐рдХ, рдореНрдпреВрдЯ, рд╡реЙрд░реНрди\n"
            f"ЁЯФТ рдПрдВрдЯреА-рд╕реНрдкреИрдо рдФрд░ рдПрдВрдЯреА-рд▓рд┐рдВрдХ рдлреАрдЪрд░реНрд╕\n"
            f"тЪЩя╕П рдХрд╕реНрдЯрдорд╛рдЗрдЬреЗрдмрд▓ рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ рдФрд░ рдирд┐рдпрдо\n"
            f"тАжрдФрд░ рднреА рдмрд╣реБрдд рдХреБрдЫ!\n\n"
            f"рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВ? рдореБрдЭреЗ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ рдФрд░ рдореБрдЭреЗ рдПрдХ рдПрдбрдорд┐рди рдмрдирд╛рдПрдВ!\n"
            f"рд╕рднреА рдХрдорд╛рдВрдбреНрд╕ рдХреА рд╕реВрдЪреА рдХреЗ рд▓рд┐рдП, /help рдЯрд╛рдЗрдк рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        # Group chat response
        await update.message.reply_text(
            f"рдирдорд╕реНрддреЗ, *{escape_markdown_v2(user.first_name)}*! рдореИрдВ рдпрд╣рд╛рдБ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд╕рдХреНрд░рд┐рдп рд╣реВрдБ! ЁЯОЙ\n"
            f"рдЗрд╕ рд╕рдореВрд╣ рдХреЗ рд▓рд┐рдП рдореИрдВ рдХреНрдпрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ рдпрд╣ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП /help рдЯрд╛рдЗрдк рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# HELP COMMAND
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type == "private":
        help_text = (
            f"ЁЯМ╣ *рд░реЛрдЬ рдмреЙрдЯ рд╕рд╣рд╛рдпрддрд╛ рдореЗрдиреВ* ЁЯМ╣\n\n"
            f"рдпрд╣рд╛рдБ рдЙрди рдХрдорд╛рдВрдбреНрд╕ рдХреА рд╕реВрдЪреА рджреА рдЧрдИ рд╣реИ рдЬрд┐рдирдХрд╛ рдЖрдк рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:\n\n"
            f"*ЁЯЫая╕П рдПрдбрдорд┐рди рдХрдорд╛рдВрдбреНрд╕:*\n"
            f"  `/ban <reply or username>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╕рдореВрд╣ рд╕реЗ рдмреИрди рдХрд░реЗрдВ\\.\n"
            f"  `/kick <reply or username>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╕рдореВрд╣ рд╕реЗ рдХрд┐рдХ рдХрд░реЗрдВ\\.\n"
            f"  `/mute <reply or username> [time]` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдЕрд╕реНрдерд╛рдпреА рдпрд╛ рд╕реНрдерд╛рдпреА рд░реВрдк рд╕реЗ рдореНрдпреВрдЯ рдХрд░реЗрдВ\\.\n"
            f"  `/unmute <reply or username>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдЕрдирдореНрдпреВрдЯ рдХрд░реЗрдВ\\.\n"
            f"  `/warn <reply or username> [reason]` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдЪреЗрддрд╛рд╡рдиреА рджреЗрдВ\\.\n"
            f"  `/warns <reply or username>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рдЪреЗрддрд╛рд╡рдирд┐рдпреЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ\\.\n"
            f"  `/resetwarns <reply or username>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рдЪреЗрддрд╛рд╡рдирд┐рдпреЛрдВ рдХреЛ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ\\.\n"
            f"  `/pin` \\- рд░рд┐рдкреНрд▓рд╛рдИ рдХрд┐рдП рдЧрдП рд╕рдВрджреЗрд╢ рдХреЛ рдкрд┐рди рдХрд░реЗрдВ\\.\n"
            f"  `/unpin` \\- рд░рд┐рдкреНрд▓рд╛рдИ рдХрд┐рдП рдЧрдП рд╕рдВрджреЗрд╢ рдХреЛ рдЕрдирдкрд┐рди рдХрд░реЗрдВ\\.\n"
            f"  `/del` \\- рд░рд┐рдкреНрд▓рд╛рдИ рдХрд┐рдП рдЧрдП рд╕рдВрджреЗрд╢ рдХреЛ рд╣рдЯрд╛рдПрдБ\\.\n"
            f"  `/purge` \\- рд░рд┐рдкреНрд▓рд╛рдИ рдХрд┐рдП рдЧрдП рд╕рдВрджреЗрд╢ рд╕реЗ рдКрдкрд░ рдХреЗ рд╕рдВрджреЗрд╢реЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдБ\\.\n"
            f"  `/setrules <text>` \\- рд╕рдореВрд╣ рдХреЗ рдирд┐рдпрдо рд╕реЗрдЯ рдХрд░реЗрдВ\\.\n"
            f"  `/rules` \\- рд╕рдореВрд╣ рдХреЗ рдирд┐рдпрдо рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\\.\n"
            f"  `/cleanrules` \\- рд╕рдореВрд╣ рдХреЗ рдирд┐рдпрдо рд╕рд╛рдл рдХрд░реЗрдВ\\.\n"
            f"  `/cleanservice` \\- рд╕реЗрд╡рд╛ рд╕рдВрджреЗрд╢реЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдБ \\(рдЬреИрд╕реЗ, рд╕рджрд╕реНрдп рд╢рд╛рдорд┐рд▓ рд╣реБрдП/рдЫреЛрдбрд╝ рдЧрдП\\)\\.\n"
            f"  `/autolink <on/off>` \\- рдСрдЯреЛ рд▓рд┐рдВрдХ рд╡рд┐рд▓реЛрдкрди рдХреЛ рдЯреЙрдЧрд▓ рдХрд░реЗрдВ\\.\n"
            f"  `/setwelcome <text>` \\- рдХрд╕реНрдЯрдо рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рд╕реЗрдЯ рдХрд░реЗрдВ \\(рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ `{{first}}`, `{{last}}`, `{{fullname}}`, `{{chatname}}`\\)\\.\n"
            f"  `/resetwelcome` \\- рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рдХреЛ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдкрд░ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ\\.\n"
            f"  `/welcome` \\- рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рдХрд╛ рдкрд░реАрдХреНрд╖рдг рдХрд░реЗрдВ\\.\n\n"
            f"*ЁЯСС рдХреЗрд╡рд▓ рдорд╛рд▓рд┐рдХ рдХрдорд╛рдВрдбреНрд╕:*\n"
            f"  `/gban <reply or username>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдмреИрди рдХрд░реЗрдВ\\.\n"
            f"  `/ungban <reply or username>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдЕрдирдмреИрди рдХрд░реЗрдВ\\.\n"
            f"  `/gblacklist <id>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ\\.\n"
            f"  `/ungblacklist <id>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рд╕реЗ рд╣рдЯрд╛рдПрдБ\\.\n"
            f"  `/blacklist_list` \\- рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рджрд┐рдЦрд╛рдПрдБ\\.\n\n"
            f"*тЬи рд╕рд╛рдорд╛рдиреНрдп рдХрдорд╛рдВрдбреНрд╕:*\n"
            f"  `/id` \\- рдЕрдкрдиреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдпрд╛ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд┐рдП рдЧрдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА ID рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\\.\n"
            f"  `/chatid` \\- рд╡рд░реНрддрдорд╛рди рдЪреИрдЯ рдХреА ID рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\\.\n"
            f"  `/info <reply or username>` \\- рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\\.\n"
            f"  `/about` \\- рд░реЛрдЬ рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдЬрд╛рдиреЗрдВ\\.\n"
            f"  `/ping` \\- рдмреЙрдЯ рдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╕рдордп рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ\\.\n\n"
            f"рдЕрдзрд┐рдХ рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдП? рд╣рдорд╛рд░реЗ [рд╕рдорд░реНрдерди рд╕рдореВрд╣](https://t.me/{escape_markdown_v2('Rajaraj909')}) рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ! ЁЯТм\n\n" # Replace with your actual support group link
            f"ЁЯМ╕ рд░реЛрдЬ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж! ЁЯМ╕"
        )
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
    else:
        await update.message.reply_text(
            f"рдирдорд╕реНрддреЗ *{escape_markdown_v2(update.effective_user.first_name)}*! ЁЯСЛ\n\n"
            f"рдореИрдВ рд╕реНрдкреИрдо рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рд╕рдореВрд╣ рдЪреИрдЯ рдореЗрдВ рдкреВрд░реНрдг рд╕рд╣рд╛рдпрддрд╛ рдореЗрдиреВ рдирд╣реАрдВ рднреЗрдЬ рд╕рдХрддрд╛ рд╣реВрдБ.\n"
            f"рд╕реБрд╡рд┐рдзрд╛рдУрдВ рдХреА рдкреВрд░реА рд╕реВрдЪреА рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдореЗрд░реЗ рд╕рд╛рде рдПрдХ рдирд┐рдЬреА рдЪреИрдЯ рдЦреЛрд▓реЗрдВ рдФрд░ рд╡рд╣рд╛рдБ /help рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ!\n\n"
            f"рдореБрдЭрд╕реЗ рдирд┐рдЬреА рдЪреИрдЯ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрд╕ [рдпрд╣рд╛рдВ](https://t.me/{context.bot.username}) рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True
        )

# KICK COMMAND
async def kick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user = None
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    elif context.args:
        try:
            user_id = int(context.args[0])
            target_chat_member = await context.bot.get_chat_member(chat.id, user_id)
            target_user = target_chat_member.user
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдХрд┐рд╕реА рдХреЛ рдХрд┐рдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрд╛ рдПрдХ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        except Exception:
            await update.message.reply_text(
                f"тЭМ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдкреНрд░рджрд╛рди рдХреА рдЧрдИ ID рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдирд╣реАрдВ рдвреВрдБрдврд╛ рдЬрд╛ рд╕рдХрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        await update.message.reply_text(
            f"ЁЯдФ рдХрд┐рд╕реА рдХреЛ рдХрд┐рдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if target_user.id == user.id:
        await update.message.reply_text(
            f"ЁЯШЕ рдЖрдк рдЦреБрдж рдХреЛ рдХрд┐рдХ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ, рд╕рд┐рд▓реА!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_admin_or_owner(update, context, chat.id, target_user.id):
        target_chat_member = await context.bot.get_chat_member(chat.id, target_user.id)
        if target_chat_member.status in ["creator", "administrator"] or \
           (target_user.username and target_user.username.lower() == OWNER.lstrip('@').lower()):
            await update.message.reply_text(
                f"ЁЯФТ рдореИрдВ рдПрдХ *рдПрдбрдорд┐рди* рдпрд╛ *рдмреЙрдЯ рдорд╛рд▓рд┐рдХ* рдХреЛ рдХрд┐рдХ рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

    try:
        await context.bot.kick_chat_member(chat.id, target_user.id)
        await update.message.reply_text(
            f"ЁЯСЛ *{escape_markdown_v2(target_user.first_name)}* рдХреЛ рд╕рдореВрд╣ рд╕реЗ рдХрд┐рдХ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!\n"
            f"_рдЕрд▓рд╡рд┐рджрд╛_! ЁЯСЛ",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Error kicking user {target_user.id}: {e}")
        await update.message.reply_text(
            f"тЪая╕П *{escape_markdown_v2(target_user.first_name)}* рдХреЛ рдХрд┐рдХ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдореЗрд░реЗ рдкрд╛рд╕ рдЖрд╡рд╢реНрдпрдХ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╣реИрдВ! ЁЯШУ",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# BAN COMMAND
async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user = None
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    elif context.args:
        try:
            user_id = int(context.args[0])
            target_chat_member = await context.bot.get_chat_member(chat.id, user_id)
            target_user = target_chat_member.user
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдХрд┐рд╕реА рдХреЛ рдмреИрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрд╛ рдПрдХ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        except Exception:
            await update.message.reply_text(
                f"тЭМ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдкреНрд░рджрд╛рди рдХреА рдЧрдИ ID рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдирд╣реАрдВ рдвреВрдБрдврд╛ рдЬрд╛ рд╕рдХрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        await update.message.reply_text(
            f"ЁЯдФ рдХрд┐рд╕реА рдХреЛ рдмреИрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if target_user.id == user.id:
        await update.message.reply_text(
            f"ЁЯШЕ рдЖрдк рдЦреБрдж рдХреЛ рдмреИрди рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ, рд╕рд┐рд▓реА!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_admin_or_owner(update, context, chat.id, target_user.id):
        target_chat_member = await context.bot.get_chat_member(chat.id, target_user.id)
        if target_chat_member.status in ["creator", "administrator"] or \
           (target_user.username and target_user.username.lower() == OWNER.lstrip('@').lower()):
            await update.message.reply_text(
                f"ЁЯФТ рдореИрдВ рдПрдХ *рдПрдбрдорд┐рди* рдпрд╛ *рдмреЙрдЯ рдорд╛рд▓рд┐рдХ* рдХреЛ рдмреИрди рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

    try:
        await context.bot.ban_chat_member(chat.id, target_user.id)
        await update.message.reply_text(
            f"тЫУя╕П *{escape_markdown_v2(target_user.first_name)}* рдХреЛ рд╕рдореВрд╣ рд╕реЗ рдмреИрди рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!\n"
            f"рд╡реЗ рдЕрдм рд╡рд╛рдкрд╕ рдирд╣реАрдВ рдЖ рд╕рдХрддреЗ! ЁЯЪл",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Error banning user {target_user.id}: {e}")
        await update.message.reply_text(
            f"тЪая╕П *{escape_markdown_v2(target_user.first_name)}* рдХреЛ рдмреИрди рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдореЗрд░реЗ рдкрд╛рд╕ рдЖрд╡рд╢реНрдпрдХ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╣реИрдВ! ЁЯШУ",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# PIN COMMAND
async def pin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not update.message.reply_to_message:
        await update.message.reply_text(
            f"ЁЯУМ рдХреГрдкрдпрд╛ рд╕рдВрджреЗрд╢ рдХреЛ рдкрд┐рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрд╕ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        await context.bot.pin_chat_message(
            chat_id=chat.id,
            message_id=update.message.reply_to_message.message_id
        )
        await update.message.reply_text(
            f"ЁЯУМ рд╕рдВрджреЗрд╢ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкрд┐рди рд╣реЛ рдЧрдпрд╛! тЬи",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Error pinning message: {e}")
        await update.message.reply_text(
            f"тЪая╕П рд╕рдВрджреЗрд╢ рдХреЛ рдкрд┐рди рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдореЗрд░реЗ рдкрд╛рд╕ рдЖрд╡рд╢реНрдпрдХ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╣реИрдВ! ЁЯШУ",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# UNPIN COMMAND
async def unpin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not update.message.reply_to_message:
        await update.message.reply_text(
            f"ЁЯУН рдХреГрдкрдпрд╛ рдкрд┐рди рдХрд┐рдП рдЧрдП рд╕рдВрджреЗрд╢ рдХреЛ рдЕрдирдкрд┐рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрд╕ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        await context.bot.unpin_chat_message(
            chat_id=chat.id,
            message_id=update.message.reply_to_message.message_id
        )
        await update.message.reply_text(
            f"ЁЯУН рд╕рдВрджреЗрд╢ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдирдкрд┐рди рд╣реЛ рдЧрдпрд╛! тЬи",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Error unpinning message: {e}")
        await update.message.reply_text(
            f"тЪая╕П рд╕рдВрджреЗрд╢ рдХреЛ рдЕрдирдкрд┐рди рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдореЗрд░реЗ рдкрд╛рд╕ рдЖрд╡рд╢реНрдпрдХ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╣реИрдВ! ЁЯШУ",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# DELETE MESSAGE COMMAND
async def delete_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not update.message.reply_to_message:
        await update.message.reply_text(
            f"ЁЯЧСя╕П рдХреГрдкрдпрд╛ рд╕рдВрджреЗрд╢ рдХреЛ рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрд╕ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        await update.message.reply_to_message.delete()
        await update.message.delete() # Delete the command message as well
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        await update.message.reply_text(
            f"тЪая╕П рд╕рдВрджреЗрд╢ рдХреЛ рд╣рдЯрд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдореЗрд░реЗ рдкрд╛рд╕ рдЖрд╡рд╢реНрдпрдХ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╣реИрдВ! ЁЯШУ",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# PURGE COMMAND
async def purge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not update.message.reply_to_message:
        await update.message.reply_text(
            f"ЁЯз╣ рдХреГрдкрдпрд╛ рдЙрд╕ *рдкрд╣рд▓реЗ рд╕рдВрджреЗрд╢* рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдЬрд╣рд╛рдБ рд╕реЗ рдЖрдк рд╣рдЯрд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    first_message_id = update.message.reply_to_message.message_id
    last_message_id = update.message.message_id
    messages_to_delete = []

    for msg_id in range(first_message_id, last_message_id + 1):
        messages_to_delete.append(msg_id)

    try:
        await context.bot.delete_messages(chat.id, messages_to_delete)
        # Inform about the purge (optional, can be deleted after a few seconds)
        purge_confirmation = await update.message.reply_text(
            f"ЁЯз╣ *{len(messages_to_delete)}* рд╕рдВрджреЗрд╢ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рдЯрд╛ рджрд┐рдП рдЧрдП! тЬи",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await asyncio.sleep(3) # Delete confirmation after 3 seconds
        await purge_confirmation.delete()
    except Exception as e:
        logger.error(f"Error purging messages: {e}")
        await update.message.reply_text(
            f"тЪая╕П рд╕рдВрджреЗрд╢реЛрдВ рдХреЛ рд╣рдЯрд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдореЗрд░реЗ рдкрд╛рд╕ рдЖрд╡рд╢реНрдпрдХ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╣реИрдВ! ЁЯШУ",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# GET CHAT ID COMMAND
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(
        f"ЁЯЖФ рдЗрд╕ рд╕рдореВрд╣ рдХреЗ рд▓рд┐рдП рдЪреИрдЯ ID рд╣реИ: `{escape_markdown_v2(str(chat_id))}`\n"
        f"_рдпрд╣ ID рдХреБрдЫ рдмреЙрдЯ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧреА рд╣реИ._",
        parse_mode=ParseMode.MARKDOWN_V2
    )

# WARN COMMAND
async def warn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user = None
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    elif context.args:
        try:
            user_id = int(context.args[0])
            target_chat_member = await context.bot.get_chat_member(chat.id, user_id)
            target_user = target_chat_member.user
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдХрд┐рд╕реА рдХреЛ рдЪреЗрддрд╛рд╡рдиреА рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрд╛ рдПрдХ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        except Exception:
            await update.message.reply_text(
                f"тЭМ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдкреНрд░рджрд╛рди рдХреА рдЧрдИ ID рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдирд╣реАрдВ рдвреВрдБрдврд╛ рдЬрд╛ рд╕рдХрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        await update.message.reply_text(
            f"ЁЯдФ рдХрд┐рд╕реА рдХреЛ рдЪреЗрддрд╛рд╡рдиреА рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if target_user.id == user.id:
        await update.message.reply_text(
            f"ЁЯШЕ рдЖрдк рдЦреБрдж рдХреЛ рдЪреЗрддрд╛рд╡рдиреА рдирд╣реАрдВ рджреЗ рд╕рдХрддреЗ, рд╕рд┐рд▓реА!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_admin_or_owner(update, context, chat.id, target_user.id):
        await update.message.reply_text(
            f"ЁЯФТ рдореИрдВ рдПрдХ *рдПрдбрдорд┐рди* рдпрд╛ *рдмреЙрдЯ рдорд╛рд▓рд┐рдХ* рдХреЛ рдЪреЗрддрд╛рд╡рдиреА рдирд╣реАрдВ рджреЗ рд╕рдХрддрд╛.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    reason = " ".join(context.args[1:]) if len(context.args) > 1 else "рдХреЛрдИ рдХрд╛рд░рдг рдирд╣реАрдВ рджрд┐рдпрд╛ рдЧрдпрд╛"

    current_warns_data = warns_collection.find_one({"chat_id": chat.id, "user_id": target_user.id})
    warn_count = current_warns_data["warn_count"] + 1 if current_warns_data else 1
    
    warns_collection.update_one(
        {"chat_id": chat.id, "user_id": target_user.id},
        {"$set": {"warn_count": warn_count, "last_warn_reason": reason}},
        upsert=True
    )

    await update.message.reply_text(
        f"тЪая╕П *{escape_markdown_v2(target_user.first_name)}* рдХреЛ рдЪреЗрддрд╛рд╡рдиреА рджреА рдЧрдИ рд╣реИ! "
        f"рд╡рд░реНрддрдорд╛рди рдЪреЗрддрд╛рд╡рдирд┐рдпрд╛рдБ: `{warn_count}`.\n"
        f"рдХрд╛рд░рдг: _{escape_markdown_v2(reason)}_\n\n"
        f"ЁЯЪи рдмрд╣реБрдд рдЕрдзрд┐рдХ рдЪреЗрддрд╛рд╡рдирд┐рдпрд╛рдБ рдХрд┐рдХ рдпрд╛ рдмреИрди рдХрд╛ рдХрд╛рд░рдг рдмрди рд╕рдХрддреА рд╣реИрдВ! рдХреГрдкрдпрд╛ рд╕рд╛рд╡рдзрд╛рди рд░рд╣реЗрдВ! ЁЯЪи",
        parse_mode=ParseMode.MARKDOWN_V2
    )

# UNWARN COMMAND
async def unwarn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user = None
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    elif context.args:
        try:
            user_id = int(context.args[0])
            target_chat_member = await context.bot.get_chat_member(chat.id, user_id)
            target_user = target_chat_member.user
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдХрд┐рд╕реА рдХреЛ рдЕрдирд╡реЙрд░реНрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрд╛ рдПрдХ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        except Exception:
            await update.message.reply_text(
                f"тЭМ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдкреНрд░рджрд╛рди рдХреА рдЧрдИ ID рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдирд╣реАрдВ рдвреВрдБрдврд╛ рдЬрд╛ рд╕рдХрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        await update.message.reply_text(
            f"ЁЯдФ рдХрд┐рд╕реА рдХреЛ рдЕрдирд╡реЙрд░реНрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if target_user.id == user.id:
        await update.message.reply_text(
            f"ЁЯШЕ рдЖрдк рдЦреБрдж рдХреЛ рдЕрдирд╡реЙрд░реНрди рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ, рд╕рд┐рд▓реА!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    result = warns_collection.delete_one({"chat_id": chat.id, "user_id": target_user.id})

    if result.deleted_count > 0:
        await update.message.reply_text(
            f"тЬЕ *{escape_markdown_v2(target_user.first_name)}* рдХреА рдЪреЗрддрд╛рд╡рдирд┐рдпрд╛рдБ рд╕рд╛рдл рдХрд░ рджреА рдЧрдИ рд╣реИрдВ! "
            f"рд╡реЗ рдЕрдм рдПрдХ рд╕рд╛рдл рд╕реНрд▓реЗрдЯ рдкрд░ рд╣реИрдВ! тЬи",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.message.reply_text(
            f"ЁЯд╖тАНтЩАя╕П *{escape_markdown_v2(target_user.first_name)}* рдХреЗ рдкрд╛рд╕ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдХреЛрдИ рд╕рдХреНрд░рд┐рдп рдЪреЗрддрд╛рд╡рдиреА рдирд╣реАрдВ рд╣реИ рдЬрд┐рд╕реЗ рд╕рд╛рдл рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХреЗ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# WARNS COMMAND
async def warns(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user = None
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    elif context.args:
        try:
            user_id = int(context.args[0])
            target_chat_member = await context.bot.get_chat_member(chat.id, user_id)
            target_user = target_chat_member.user
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдЪреЗрддрд╛рд╡рдирд┐рдпреЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрд╛ рдПрдХ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        except Exception:
            await update.message.reply_text(
                f"тЭМ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдкреНрд░рджрд╛рди рдХреА рдЧрдИ ID рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдирд╣реАрдВ рдвреВрдБрдврд╛ рдЬрд╛ рд╕рдХрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        await update.message.reply_text(
            f"ЁЯдФ рдЪреЗрддрд╛рд╡рдирд┐рдпреЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    warn_data = warns_collection.find_one({"chat_id": chat.id, "user_id": target_user.id})

    if warn_data:
        warn_count = warn_data.get("warn_count", 0)
        last_reason = warn_data.get("last_warn_reason", "N/A")
        await update.message.reply_text(
            f"ЁЯУК *{escape_markdown_v2(target_user.first_name)}* рдХреЗ рдЗрд╕ рд╕рдореВрд╣ рдореЗрдВ `{warn_count}` рдЪреЗрддрд╛рд╡рдирд┐рдпрд╛рдБ рд╣реИрдВ.\n"
            f"рдЕрдВрддрд┐рдо рдХрд╛рд░рдг: _{escape_markdown_v2(last_reason)}_\n\n"
            f"_рдЙрдирдХреА рдЪреЗрддрд╛рд╡рдирд┐рдпреЛрдВ рдХреЛ рд░реАрд╕реЗрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, `/resetwarns` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ_",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.message.reply_text(
            f"тЬЕ *{escape_markdown_v2(target_user.first_name)}* рдХреЗ рдЗрд╕ рд╕рдореВрд╣ рдореЗрдВ рдХреЛрдИ рд╕рдХреНрд░рд┐рдп рдЪреЗрддрд╛рд╡рдиреА рдирд╣реАрдВ рд╣реИ!\n"
            f"_рд╡реЗ рдПрдХ рдЕрдЪреНрдЫреЗ рд╕рджрд╕реНрдп рд╣реИрдВ_. ЁЯСН",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# MUTE COMMAND
async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user = None
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    elif context.args:
        try:
            user_id = int(context.args[0])
            target_chat_member = await context.bot.get_chat_member(chat.id, user_id)
            target_user = target_chat_member.user
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдХрд┐рд╕реА рдХреЛ рдореНрдпреВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрд╛ рдПрдХ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        except Exception:
            await update.message.reply_text(
                f"тЭМ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдкреНрд░рджрд╛рди рдХреА рдЧрдИ ID рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдирд╣реАрдВ рдвреВрдБрдврд╛ рдЬрд╛ рд╕рдХрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        await update.message.reply_text(
            f"ЁЯдФ рдХрд┐рд╕реА рдХреЛ рдореНрдпреВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if target_user.id == user.id:
        await update.message.reply_text(
            f"ЁЯШЕ рдЖрдк рдЦреБрдж рдХреЛ рдореНрдпреВрдЯ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ, рд╕рд┐рд▓реА!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_admin_or_owner(update, context, chat.id, target_user.id):
        target_chat_member = await context.bot.get_chat_member(chat.id, target_user.id)
        if target_chat_member.status in ["creator", "administrator"] or \
           (target_user.username and target_user.username.lower() == OWNER.lstrip('@').lower()):
            await update.message.reply_text(
                f"ЁЯФТ рдореИрдВ рдПрдХ *рдПрдбрдорд┐рди* рдпрд╛ *рдмреЙрдЯ рдорд╛рд▓рд┐рдХ* рдХреЛ рдореНрдпреВрдЯ рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

    mute_duration = None
    mute_duration_str = "рд╕реНрдерд╛рдпреА рд░реВрдк рд╕реЗ"
    if len(context.args) > 1:
        try:
            duration_str = context.args[1]
            if duration_str.endswith("m"):
                mute_duration = timedelta(minutes=int(duration_str[:-1]))
                mute_duration_str = f"{int(duration_str[:-1])} рдорд┐рдирдЯ рдХреЗ рд▓рд┐рдП"
            elif duration_str.endswith("h"):
                mute_duration = timedelta(hours=int(duration_str[:-1]))
                mute_duration_str = f"{int(duration_str[:-1])} рдШрдВрдЯреЗ рдХреЗ рд▓рд┐рдП"
            elif duration_str.endswith("d"):
                mute_duration = timedelta(days=int(duration_str[:-1]))
                mute_duration_str = f"{int(duration_str[:-1])} рджрд┐рдиреЛрдВ рдХреЗ рд▓рд┐рдП"
            else:
                await update.message.reply_text(
                    f"тЭМ рдЕрдорд╛рдиреНрдп рдореНрдпреВрдЯ рдЕрд╡рдзрд┐ рдкреНрд░рд╛рд░реВрдк.\n"
                    f"рдорд┐рдирдЯ рдХреЗ рд▓рд┐рдП `[рд╕рдВрдЦреНрдпрд╛]m`, рдШрдВрдЯреЗ рдХреЗ рд▓рд┐рдП `[рд╕рдВрдЦреНрдпрд╛]h`, рдпрд╛ рджрд┐рдиреЛрдВ рдХреЗ рд▓рд┐рдП `[рд╕рдВрдЦреНрдпрд╛]d` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ.",
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                return
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдЕрдорд╛рдиреНрдп рдореНрдпреВрдЯ рдЕрд╡рдзрд┐ рдорд╛рди.\n"
                f"рдорд┐рдирдЯ рдХреЗ рд▓рд┐рдП `[рд╕рдВрдЦреНрдпрд╛]m`, рдШрдВрдЯреЗ рдХреЗ рд▓рд┐рдП `[рд╕рдВрдЦреНрдпрд╛]h`, рдпрд╛ рджрд┐рдиреЛрдВ рдХреЗ рд▓рд┐рдП `[рд╕рдВрдЦреНрдпрд╛]d` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

    permissions = ChatPermissions(can_send_messages=False)
    until_date = datetime.now() + mute_duration if mute_duration else None

    try:
        await context.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=target_user.id,
            permissions=permissions,
            until_date=until_date
        )
        await update.message.reply_text(
            f"ЁЯФЗ *{escape_markdown_v2(target_user.first_name)}* рдХреЛ {escape_markdown_v2(mute_duration_str)} рдореНрдпреВрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! ЁЯдл\n"
            f"_рдХреБрдЫ рджреЗрд░ рдХреЗ рд▓рд┐рдП рдЕрдм рдХреЛрдИ рдмрд╛рдд рдирд╣реАрдВ_! ЁЯСЛ",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Error muting user {target_user.id}: {e}")
        await update.message.reply_text(
            f"тЪая╕П *{escape_markdown_v2(target_user.first_name)}* рдХреЛ рдореНрдпреВрдЯ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдореЗрд░реЗ рдкрд╛рд╕ рдЖрд╡рд╢реНрдпрдХ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╣реИрдВ! ЁЯШУ",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# UNMUTE COMMAND
async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user = None
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    elif context.args:
        try:
            user_id = int(context.args[0])
            target_chat_member = await context.bot.get_chat_member(chat.id, user_id)
            target_user = target_chat_member.user
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдХрд┐рд╕реА рдХреЛ рдЕрдирдореНрдпреВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрд╛ рдПрдХ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        except Exception:
            await update.message.reply_text(
                f"тЭМ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдкреНрд░рджрд╛рди рдХреА рдЧрдИ ID рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдирд╣реАрдВ рдвреВрдБрдврд╛ рдЬрд╛ рд╕рдХрд╛.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        await update.message.reply_text(
            f"ЁЯдФ рдХрд┐рд╕реА рдХреЛ рдЕрдирдореНрдпреВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if target_user.id == user.id:
        await update.message.reply_text(
            f"ЁЯШЕ рдпрджрд┐ рдЖрдк рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рддреЛ рдЖрдк рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдЕрдирдореНрдпреВрдЯ рд╣реИрдВ, рд╕рд┐рд▓реА!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    permissions = ChatPermissions(
        can_send_messages=True,
        can_send_audios=True,
        can_send_documents=True,
        can_send_photos=True,
        can_send_videos=True,
        can_send_video_notes=True,
        can_send_voice_notes=True,
        can_send_other_messages=True,
        can_add_web_page_previews=True,
        can_change_info=False, # Admins only
        can_invite_users=True,
        can_pin_messages=False, # Admins only
        can_manage_topics=False # For forum groups, admins only
    )

    try:
        await context.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=target_user.id,
            permissions=permissions
        )
        await update.message.reply_text(
            f"ЁЯОд *{escape_markdown_v2(target_user.first_name)}* рдХреЛ рдЕрдирдореНрдпреВрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! ЁЯОЙ\n"
            f"_рдмрд╛рддрдЪреАрдд рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ_! ЁЯдЧ",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Error unmuting user {target_user.id}: {e}")
        await update.message.reply_text(
            f"тЪая╕П *{escape_markdown_v2(target_user.first_name)}* рдХреЛ рдЕрдирдореНрдпреВрдЯ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдореЗрд░реЗ рдкрд╛рд╕ рдЖрд╡рд╢реНрдпрдХ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╣реИрдВ! ЁЯШУ",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# ABOUT COMMAND
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"ЁЯМ╕ *рд░реЛрдЬ рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ* ЁЯМ╕\n\n"
        f"рдореИрдВ рдПрдХ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдФрд░ рдмрд╣реБрдореБрдЦреА рд╕рдореВрд╣ рдкреНрд░рдмрдВрдзрди рдмреЙрдЯ рд╣реВрдБ рдЬрд┐рд╕реЗ рдЖрдкрдХреЗ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рд╕рдореВрд╣реЛрдВ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд, рд╕реНрд╡рдЪреНрдЫ рдФрд░ рдЖрдХрд░реНрд╖рдХ рд░рдЦрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдбрд┐рдЬрд╝рд╛рдЗрди рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! тЬи\n\n"
        f"**рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ:**\n"
        f"  тАв  рдЙрдиреНрдирдд рдореЙрдбрд░реЗрд╢рди рдЙрдкрдХрд░рдг \\(рдХрд┐рдХ, рдмреИрди, рдореНрдпреВрдЯ, рд╡реЙрд░реНрди\\)\n"
        f"  тАв  рдХрд╕реНрдЯрдорд╛рдЗрдЬреЗрдмрд▓ рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рдФрд░ рд╕рдореВрд╣ рдирд┐рдпрдо\n"
        f"  тАв  рдПрдВрдЯреА-рд╕реНрдкреИрдо рдФрд░ рдПрдВрдЯреА-рд▓рд┐рдВрдХ рддрдВрддреНрд░\n"
        f"  тАв  рд▓рдЧрд╛рддрд╛рд░ рд╕рдорд╕реНрдпрд╛ рдкреИрджрд╛ рдХрд░рдиреЗ рд╡рд╛рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рд╡реИрд╢реНрд╡рд┐рдХ рдмреИрди рдкреНрд░рдгрд╛рд▓реА\n"
        f"  тАв  рдФрд░ рднреА рдмрд╣реБрдд рдХреБрдЫ! ЁЯЪА\n\n"
        f"{OWNER} рджреНрд╡рд╛рд░рд╛ тЭдя╕П рдХреЗ рд╕рд╛рде рд╡рд┐рдХрд╕рд┐рдд\n"
        f"рд╕рдВрд╕реНрдХрд░рдг: `1.0.0`\n" # You can add a version number here
        f"рдЕрдкрдбреЗрдЯ рдФрд░ рдЪрд░реНрдЪрд╛ рдХреЗ рд▓рд┐рдП рдореЗрд░реЗ [рд╕рдорд░реНрдерди рдЪреИрдирд▓](https://t.me/{escape_markdown_v2('Rajaraj909')}) рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ! ЁЯУг", # Replace with your actual channel link
        parse_mode=ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True
    )

# PING COMMAND
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    start_time = time.time()
    ping_message = await update.message.reply_text(
        f"ЁЯПУ рдкреЛрдВрдЧ! рд╡рд┐рд▓рдВрдмрддрд╛ рдорд╛рдк рд░рд╣рд╛ рд╣реИ..",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    end_time = time.time()
    latency = round((end_time - start_time) * 1000) # in milliseconds
    await ping_message.edit_text(
        f"ЁЯПУ рдкреЛрдВрдЧ! рд╡рд┐рд▓рдВрдмрддрд╛: `{latency}`ms.\n"
        f"_рдореИрдВ рдкрд▓рдХ рдЭрдкрдХрддреЗ рд╣реА рддреЗрдЬрд╝ рд╣реВрдБ_! тЬи",
        parse_mode=ParseMode.MARKDOWN_V2
    )

# GLOBAL BAN COMMAND (OWNER ONLY)
async def gban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username.lower() != OWNER.lstrip('@').lower():
        await update.message.reply_text(
            f"ЁЯЪл *рдкрд╣реБрдБрдЪ рдЕрд╕реНрд╡реАрдХреГрдд* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреЗрд╡рд▓ *рдмреЙрдЯ рдорд╛рд▓рд┐рдХ* рд╣реА рдХрд░ рд╕рдХрддрд╛ рд╣реИ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_id = None
    target_username = None
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_username = update.message.reply_to_message.from_user.username or update.message.reply_to_message.from_user.first_name
    elif context.args:
        try:
            target_user_id = int(context.args[0])
            try:
                target_user_chat_info = await context.bot.get_chat(target_user_id)
                target_username = target_user_chat_info.username or target_user_chat_info.first_name
            except Exception:
                target_username = f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: {target_user_id}"
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдХрд┐рд╕реА рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдмреИрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрд╛ рдПрдХ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        await update.message.reply_text(
            f"ЁЯдФ рдХрд┐рд╕реА рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдмреИрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not target_user_id:
        await update.message.reply_text(
            f"тЭМ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдмреИрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрд╛.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if target_user_id == user.id:
        await update.message.reply_text(
            f"ЁЯШЕ рдЖрдк рдЦреБрдж рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдмреИрди рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ, рд╕рд┐рд▓реА!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        global_bans_collection.update_one(
            {"user_id": target_user_id},
            {"$set": {"banned_by": user.id, "banned_at": datetime.now()}},
            upsert=True
        )
        await update.message.reply_text(
            f"тЫФя╕П *{escape_markdown_v2(str(target_username))}* \\(ID: `{target_user_id}`\\) рдХреЛ *рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдмреИрди* рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! ЁЯЪл\n"
            f"_рд╡реЗ рдЕрдм рдореЗрд░реЗ рдЙрдкрд╕реНрдерд┐рдд рд╕рднреА рд╕рдореВрд╣реЛрдВ рд╕реЗ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рд╣реИрдВ._",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Error global banning user {target_user_id}: {e}")
        await update.message.reply_text(
            f"тЪая╕П *{escape_markdown_v2(str(target_username))}* рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдмреИрди рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: _{escape_markdown_v2(str(e))}_",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# UNGBAN COMMAND (OWNER ONLY)
async def ungban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username.lower() != OWNER.lstrip('@').lower():
        await update.message.reply_text(
            f"ЁЯЪл *рдкрд╣реБрдБрдЪ рдЕрд╕реНрд╡реАрдХреГрдд* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреЗрд╡рд▓ *рдмреЙрдЯ рдорд╛рд▓рд┐рдХ* рд╣реА рдХрд░ рд╕рдХрддрд╛ рд╣реИ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_id = None
    target_username = None
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_username = update.message.reply_to_message.from_user.username or update.message.reply_to_message.from_user.first_name
    elif context.args:
        try:
            target_user_id = int(context.args[0])
            try:
                target_user_chat_info = await context.bot.get_chat(target_user_id)
                target_username = target_user_chat_info.username or target_user_chat_info.first_name
            except Exception:
                target_username = f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: {target_user_id}"
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдХрд┐рд╕реА рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдЕрдирдмреИрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        await update.message.reply_text(
            f"ЁЯдФ рдХрд┐рд╕реА рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдЕрдирдмреИрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not target_user_id:
        await update.message.reply_text(
            f"тЭМ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдЕрдирдмреИрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрд╛.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        result = global_bans_collection.delete_one({"user_id": target_user_id})
        if result.deleted_count > 0:
            await update.message.reply_text(
                f"тЬЕ *{escape_markdown_v2(str(target_username))}* \\(ID: `{target_user_id}`\\) рдХреЛ *рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдЕрдирдмреИрди* рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! ЁЯОЙ\n"
                f"_рд╡реЗ рдЕрдм рдЙрди рд╕рдореВрд╣реЛрдВ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ рдЬрд╣рд╛рдБ рдореИрдВ рдЙрдкрд╕реНрдерд┐рдд рд╣реВрдБ._",
                parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await update.message.reply_text(
                f"ЁЯд╖тАНтЩАя╕П рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ \\(ID: `{target_user_id}`\\) рд╡рд░реНрддрдорд╛рди рдореЗрдВ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдмреИрди рдирд╣реАрдВ рд╣реИ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"Error unglobal banning user {target_user_id}: {e}")
        await update.message.reply_text(
            f"тЪая╕П *{escape_markdown_v2(str(target_username))}* рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рд░реВрдк рд╕реЗ рдЕрдирдмреИрди рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: _{escape_markdown_v2(str(e))}_",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# GBLACKLIST COMMAND (OWNER ONLY - Similar to Gban, but can be managed by ID for persistent users)
async def gblacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username.lower() != OWNER.lstrip('@').lower():
        await update.message.reply_text(
            f"ЁЯЪл *рдкрд╣реБрдБрдЪ рдЕрд╕реНрд╡реАрдХреГрдд* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреЗрд╡рд▓ *рдмреЙрдЯ рдорд╛рд▓рд┐рдХ* рд╣реА рдХрд░ рд╕рдХрддрд╛ рд╣реИ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            f"тЭМ рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рдореЗрдВ рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз *рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID* рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.\n"
            f"рдЙрджрд╛рд╣рд░рдг: `/gblacklist 123456789`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_id = int(context.args[0])

    if target_user_id == user.id:
        await update.message.reply_text(
            f"ЁЯШЕ рдЖрдк рдЦреБрдж рдХреЛ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ, рд╕рд┐рд▓реА!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        global_bans_collection.update_one(
            {"user_id": target_user_id},
            {"$set": {"banned_by": user.id, "banned_at": datetime.now(), "is_blacklist": True}},
            upsert=True
        )
        await update.message.reply_text(
            f"ЁЯЪи рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: `{target_user_id}` рдХреЛ *рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ* рдореЗрдВ рдЬреЛрдбрд╝ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! тЫФя╕П\n"
            f"_рд╡реЗ рдЕрдм рдХрд┐рд╕реА рднреА рд╕рдореВрд╣ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рдирд╣реАрдВ рд╣реЛ рдкрд╛рдПрдВрдЧреЗ рдЬрд╣рд╛рдБ рдореИрдВ рд╕рдХреНрд░рд┐рдп рд╣реВрдБ._",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Error global blacklisting user {target_user_id}: {e}")
        await update.message.reply_text(
            f"тЪая╕П рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: `{target_user_id}` рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рдореЗрдВ рдЬреЛрдбрд╝рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: _{escape_markdown_v2(str(e))}_",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# UNGBLACKLIST COMMAND (OWNER ONLY)
async def ungblacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username.lower() != OWNER.lstrip('@').lower():
        await update.message.reply_text(
            f"ЁЯЪл *рдкрд╣реБрдБрдЪ рдЕрд╕реНрд╡реАрдХреГрдд* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреЗрд╡рд▓ *рдмреЙрдЯ рдорд╛рд▓рд┐рдХ* рд╣реА рдХрд░ рд╕рдХрддрд╛ рд╣реИ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            f"тЭМ рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рд╕реЗ рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз *рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID* рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.\n"
            f"рдЙрджрд╛рд╣рд░рдг: `/ungblacklist 123456789`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_id = int(context.args[0])

    try:
        result = global_bans_collection.delete_one({"user_id": target_user_id, "is_blacklist": True})
        if result.deleted_count > 0:
            await update.message.reply_text(
                f"тЬЕ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: `{target_user_id}` рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рд╕реЗ *рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛* рд╣реИ! ЁЯОЙ\n"
                f"_рд╡реЗ рдЕрдм рдЙрди рд╕рдореВрд╣реЛрдВ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ рдЬрд╣рд╛рдБ рдореИрдВ рд╕рдХреНрд░рд┐рдп рд╣реВрдБ._",
                parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await update.message.reply_text(
                f"ЁЯд╖тАНтЩАя╕П рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: `{target_user_id}` рд╡рд░реНрддрдорд╛рди рдореЗрдВ рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рдореЗрдВ рдирд╣реАрдВ рд╣реИ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"Error unglobal blacklisting user {target_user_id}: {e}")
        await update.message.reply_text(
            f"тЪая╕П рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: `{target_user_id}` рдХреЛ рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ рд╕реЗ рд╣рдЯрд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛.\n"
            f"рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: _{escape_markdown_v2(str(e))}_",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# BLACKLIST LIST COMMAND (OWNER ONLY)
async def blacklist_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username.lower() != OWNER.lstrip('@').lower():
        await update.message.reply_text(
            f"ЁЯЪл *рдкрд╣реБрдБрдЪ рдЕрд╕реНрд╡реАрдХреГрдд* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреЗрд╡рд▓ *рдмреЙрдЯ рдорд╛рд▓рд┐рдХ* рд╣реА рдХрд░ рд╕рдХрддрд╛ рд╣реИ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    blacklisted_users = list(global_bans_collection.find({"is_blacklist": True}))

    if blacklisted_users:
        response = "ЁЯУЛ *рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯреЗрдб рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛:*\n\n"
        for entry in blacklisted_users:
            user_id = entry.get("user_id")
            banned_at = entry.get("banned_at", "N/A").strftime("%Y-%m-%d %H:%M:%S") if entry.get("banned_at") != "N/A" else "N/A"
            response += f"тАв  рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: `{user_id}` \\| рдмреИрди рдХрд┐рдпрд╛ рдЧрдпрд╛: _{banned_at}_\n"
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text(
            f"тЬЕ рд╡рд░реНрддрдорд╛рди рдореЗрдВ *рд╡реИрд╢реНрд╡рд┐рдХ рдмреНрд▓реИрдХрд▓рд┐рд╕реНрдЯ* рдореЗрдВ рдХреЛрдИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рд╣реИрдВ. рд╕реВрдЪреА рд╕рд╛рдл рд╣реИ! тЬи",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# RULES COMMANDS
async def setrules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдирд┐рдпрдо рд╕реЗрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not context.args:
        await update.message.reply_text(
            f"тЭМ рдХрдорд╛рдВрдб рдХреЗ рдмрд╛рдж рдХреГрдкрдпрд╛ рдирд┐рдпрдо рдкрд╛рда рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.\n"
            f"рдЙрджрд╛рд╣рд░рдг: `/setrules рджрдпрд╛рд▓реБ рд░рд╣реЗрдВ, рдЯреЗрд▓реАрдЧреНрд░рд╛рдо TOS рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВ.`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    rules_text = " ".join(context.args)
    rules_collection.update_one(
        {"chat_id": chat.id},
        {"$set": {"rules_text": rules_text}},
        upsert=True
    )
    await update.message.reply_text(
        f"ЁЯУЬ рд╕рдореВрд╣ рдХреЗ рдирд┐рдпрдо *рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕реЗрдЯ* рд╣реЛ рдЧрдП рд╣реИрдВ! тЬи\n"
        f"рд╕рджрд╕реНрдп рдЕрдм рдЙрдиреНрд╣реЗрдВ `/rules` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВ.",
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    rules_data = rules_collection.find_one({"chat_id": chat.id})

    if rules_data and rules_data.get("rules_text"):
        rules_text = rules_data["rules_text"]
        await update.message.reply_text(
            f"ЁЯУЬ *{escape_markdown_v2(chat.title)} рдХреЗ рд▓рд┐рдП рд╕рдореВрд╣ рдХреЗ рдирд┐рдпрдо:*\n\n"
            f"{escape_markdown_v2(rules_text)}\n\n"
            f"_рдХреГрдкрдпрд╛ рд╕рднреА рдХреЗ рд▓рд┐рдП рдПрдХ рд╕реБрдЦрдж рд╡рд╛рддрд╛рд╡рд░рдг рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрди рдирд┐рдпрдореЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВ._ ЁЯШЗ",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.message.reply_text(
            f"ЁЯд╖тАНтЩАя╕П рдЗрд╕ рд╕рдореВрд╣ рдХреЗ рд▓рд┐рдП рдЕрднреА рддрдХ рдХреЛрдИ рдирд┐рдпрдо рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдирд╣реАрдВ рдХрд┐рдП рдЧрдП рд╣реИрдВ.\n"
            f"_рдПрдбрдорд┐рди `/setrules <text>` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдирд┐рдпрдо рд╕реЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ._",
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def cleanrules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдирд┐рдпрдо рд╕рд╛рдл рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    result = rules_collection.delete_one({"chat_id": chat.id})
    if result.deleted_count > 0:
        await update.message.reply_text(
            f"ЁЯЧСя╕П рд╕рдореВрд╣ рдХреЗ рдирд┐рдпрдо *рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рд╛рдл* рд╣реЛ рдЧрдП рд╣реИрдВ! тЬи",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.message.reply_text(
            f"ЁЯд╖тАНтЩАя╕П рдЗрд╕ рд╕рдореВрд╣ рдХреЗ рд▓рд┐рдП рд╢реБрд░реВ рд╕реЗ рд╣реА рдХреЛрдИ рдирд┐рдпрдо рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдирд╣реАрдВ рдХрд┐рдП рдЧрдП рдереЗ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# AUTO LINK FILTER
async def handle_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    message = update.effective_message

    chat_settings = chat_settings_collection.find_one({"chat_id": chat.id})
    if not chat_settings or not chat_settings.get("auto_link_filter", False):
        return # Do nothing if auto link filter is off

    if message.from_user and await is_admin_or_owner(update, context, chat.id, message.from_user.id):
        return

    if message.text and (message.entities or message.caption_entities):
        has_url = False
        for entity in (message.entities or []) + (message.caption_entities or []):
            if entity.type in ["url", "text_link"]:
                has_url = True
                break

        if has_url:
            try:
                await message.delete()
                await context.bot.send_message(
                    chat.id,
                    f"ЁЯФЧ рд▓рд┐рдВрдХ рдпрд╣рд╛рдБ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИрдВ, *{escape_markdown_v2(message.from_user.first_name)}*! ЁЯЩЕтАНтЩАя╕П",
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e:
                logger.warning(f"рд▓рд┐рдВрдХ рд╕рдВрджреЗрд╢ рдХреЛ рд╣рдЯрд╛рдиреЗ рдпрд╛ рдЪреЗрддрд╛рд╡рдиреА рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}")

# FALLBACK HELP FOR UNKNOWN COMMANDS
async def fallback_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type == "group" and update.effective_message.text and update.effective_message.text.startswith('/'):
        # This checks if it's a command that the bot received.
        # A more robust check would involve iterating through registered command handlers,
        # but for simplicity, we assume if it starts with '/' it's an intended command.
        command_text = update.effective_message.text.split(' ')[0]
        if command_text.lower() not in context.application.handlers: # This is a conceptual check, handlers are not directly accessible this way.
            # A simpler way is to let this handler be the last CommandHandler or a general MessageHandler that checks for '/'
            await update.message.reply_text(
                f"тЭУ рдореИрдВ рдЙрд╕ рдХрдорд╛рдВрдб рд╕реЗ рдкрд░рд┐рдЪрд┐рдд рдирд╣реАрдВ рд╣реВрдБ, *{escape_markdown_v2(update.effective_user.first_name)}*.\n"
                f"рдХрдорд╛рдВрдбреНрд╕ рдХреА рд╕реВрдЪреА рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдореЗрд░реЗ рд╕рд╛рде рдПрдХ рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ /help рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )

# CLEAN SERVICE MESSAGES
async def cleanservice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    await update.message.reply_text(
        f"ЁЯз╣ рдпрд╣ рдХрдорд╛рдВрдб рдкреВрд░реНрдг рд╕реНрд╡рдЪрд╛рд▓рди рдХреЗ рд▓рд┐рдП рд╡рд┐рдХрд╛рд╕ рдХреЗ рдЕрдзреАрди рд╣реИ.\n"
        f"_рд╡рд░реНрддрдорд╛рди рдореЗрдВ, рдЖрдк рд╕реЗрд╡рд╛ рд╕рдВрджреЗрд╢реЛрдВ рдХреЛ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рд╣рдЯрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдпрд╛ рд╕рдореВрд╣ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ._",
        parse_mode=ParseMode.MARKDOWN_V2
    )

# AUTO LINK TOGGLE
async def autolink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рдСрдЯреЛ рд▓рд┐рдВрдХ рдлрд┐рд▓реНрдЯрд░ рдХреЛ рдЯреЙрдЧрд▓ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not context.args or context.args[0].lower() not in ["on", "off"]:
        await update.message.reply_text(
            f"тЭМ рдСрдЯреЛ рд▓рд┐рдВрдХ рдлрд┐рд▓реНрдЯрд░ рдХреЛ рдЯреЙрдЧрд▓ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ `on` рдпрд╛ `off` рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдХрд░реЗрдВ.\n"
            f"рдЙрджрд╛рд╣рд░рдг: `/autolink on` рдпрд╛ `/autolink off`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    action = context.args[0].lower()
    if action == "on":
        chat_settings_collection.update_one({"chat_id": chat.id}, {"$set": {"auto_link_filter": True}}, upsert=True)
        await update.message.reply_text(
            f"тЬЕ рдСрдЯреЛ рд▓рд┐рдВрдХ рд╡рд┐рд▓реЛрдкрди рдЗрд╕ рд╕рдореВрд╣ рдХреЗ рд▓рд┐рдП *рд╕рдХреНрд╖рдо* рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! ЁЯФЧ\n"
            f"_рдореИрдВ рдЕрдм рд▓рд┐рдВрдХ рд╡рд╛рд▓реЗ рд╕рдВрджреЗрд╢реЛрдВ рдХреЛ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рд╣рдЯрд╛ рджреВрдВрдЧрд╛._",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        chat_settings_collection.update_one({"chat_id": chat.id}, {"$set": {"auto_link_filter": False}}, upsert=True)
        await update.message.reply_text(
            f"ЁЯЪл рдСрдЯреЛ рд▓рд┐рдВрдХ рд╡рд┐рд▓реЛрдкрди рдЗрд╕ рд╕рдореВрд╣ рдХреЗ рд▓рд┐рдП *рдЕрдХреНрд╖рдо* рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! ЁЯФУ\n"
            f"_рд▓рд┐рдВрдХ рдЕрдм рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рд╣рдЯрд╛рдП рдирд╣реАрдВ рдЬрд╛рдПрдВрдЧреЗ._",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# WELCOME MESSAGE
async def setwelcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рд╕реЗрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not context.args:
        await update.message.reply_text(
            f"тЭМ рдХрдорд╛рдВрдб рдХреЗ рдмрд╛рдж рдХреГрдкрдпрд╛ рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рдкрд╛рда рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.\n"
            f"рдЖрдк рдкреНрд▓реЗрд╕рд╣реЛрд▓реНрдбрд░реНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ: `{{first}}`, `{{last}}`, `{{fullname}}`, `{{chatname}}`\\.\n"
            f"рдЙрджрд╛рд╣рд░рдг: `/setwelcome {{first}} рдХрд╛ {{chatname}} рдореЗрдВ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    welcome_text = " ".join(context.args)
    welcomes_collection.update_one(
        {"chat_id": chat.id},
        {"$set": {"welcome_message": welcome_text}},
        upsert=True
    )
    await update.message.reply_text(
        f"ЁЯОЙ рдХрд╕реНрдЯрдо рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ *рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕реЗрдЯ* рд╣реЛ рдЧрдпрд╛ рд╣реИ! тЬи\n"
        f"_рдирдП рд╕рджрд╕реНрдпреЛрдВ рдХреЛ рдЕрдм рдпрд╣ рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдИ рджреЗрдЧрд╛._",
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def resetwelcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if not await is_admin_or_owner(update, context, chat.id, user.id):
        await update.message.reply_text(
            f"ЁЯЪл *рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ* ЁЯЪл\n"
            f"рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рд░реАрд╕реЗрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдПрдХ *рдПрдбрдорд┐рди* рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    result = welcomes_collection.delete_one({"chat_id": chat.id})
    if result.deleted_count > 0:
        await update.message.reply_text(
            f"тЖйя╕П рдХрд╕реНрдЯрдо рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ *рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдкрд░ рд░реАрд╕реЗрдЯ* рд╣реЛ рдЧрдпрд╛ рд╣реИ! тЬи",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.message.reply_text(
            f"ЁЯд╖тАНтЩАя╕П рдЗрд╕ рд╕рдореВрд╣ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдХрд╕реНрдЯрдо рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рд╕реЗрдЯ рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдерд╛.",
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    welcome_data = welcomes_collection.find_one({"chat_id": chat.id})
    
    welcome_message_text = welcome_data.get("welcome_message") if welcome_data else (
        "ЁЯСЛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, {fullname}, {chatname} рдореЗрдВ!"
    )

    simulated_user = update.effective_user
    formatted_message = welcome_message_text.replace("{first}", escape_markdown_v2(simulated_user.first_name))\
                                            .replace("{last}", escape_markdown_v2(simulated_user.last_name or ""))\
                                            .replace("{fullname}", escape_markdown_v2(simulated_user.full_name))\
                                            .replace("{chatname}", escape_markdown_v2(chat.title))

    await update.message.reply_text(
        f"ЁЯУЭ *{escape_markdown_v2(simulated_user.first_name)}* рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рдХрд╛ рдкрд░реАрдХреНрд╖рдг рдХрд░ рд░рд╣рд╛ рд╣реИ:\n\n"
        f"{formatted_message}",
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def new_member_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        if member.id == context.bot.id:
            # Bot joined the group
            await update.message.reply_text(
                f"ЁЯОЙ рд╕рднреА рдХреЛ рдирдорд╕реНрддреЗ! рдореИрдВ *рд░реЛрдЬ*, рдЖрдкрдХреА рдирдИ рд╕рдореВрд╣ рдкреНрд░рдмрдВрдзрдХ рд╣реВрдБ! ЁЯМ╣\n"
                f"рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдк рдореБрдЭреЗ рдПрдХ *рдПрдбрдорд┐рди* рдмрдирд╛рдПрдВ рддрд╛рдХрд┐ рдореИрдВ рдЗрд╕ рдЪреИрдЯ рдХреЛ рдЕрджреНрднреБрдд рдмрдирд╛рдП рд░рдЦрдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХреВрдВ! ЁЯТк",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        chat = update.effective_chat
        welcome_data = welcomes_collection.find_one({"chat_id": chat.id})
        
        # Dynamic welcome message variations
        default_welcome_templates = [
            "ЁЯСЛ {fullname} рдХрд╛ {chatname} рдореЗрдВ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рд╣рдореЗрдВ рдЖрдкрдХреЛ рдкрд╛рдХрд░ рдЦреБрд╢реА рд╣реБрдИ! ЁЯОЙ",
            "тЬи {fullname} рдиреЗ рдЕрднреА-рдЕрднреА {chatname} рдореЗрдВ рдкреНрд░рд╡реЗрд╢ рдХрд┐рдпрд╛! рдордЬрд╝реЗ рдХрд░реЗрдВ! ЁЯе│",
            "ЁЯЪА рдПрдХ рдирдП рд╕рджрд╕реНрдп рдиреЗ рдЙрдбрд╝рд╛рди рднрд░реА: {fullname}! {chatname} рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯСЛ",
            "ЁЯМЯ {fullname} рдХрд╛ {chatname} рдореЗрдВ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рд╣рдо рдЖрдкрдХреЗ рд╢рд╛рдорд┐рд▓ рд╣реЛрдиреЗ рд╕реЗ рдЙрддреНрд╕рд╛рд╣рд┐рдд рд╣реИрдВ! ЁЯШК",
            "ЁЯТЦ {fullname}, {chatname} рдХреЗ рдкрд░рд┐рд╡рд╛рд░ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рд╣рдо рдЖрдкрдХреЗ рд╕рд╛рде рдЬреБрдбрд╝рдХрд░ рдЦреБрд╢ рд╣реИрдВ! ЁЯдЧ"
        ]
        
        welcome_message_text = welcome_data.get("welcome_message") if welcome_data else random.choice(default_welcome_templates)

        formatted_message = welcome_message_text.replace("{first}", escape_markdown_v2(member.first_name))\
                                                .replace("{last}", escape_markdown_v2(member.last_name or ""))\
                                                .replace("{fullname}", escape_markdown_v2(member.full_name))\
                                                .replace("{chatname}", escape_markdown_v2(chat.title))

        # Add user's details uniquely for welcome
        user_info = await _get_user_display_info(member)
        details_text = (
            f"\n\n"
            f"ЁЯФЧ *рдЖрдкрдХрд╛ рд╡рд┐рд╡рд░рдг:*\n"
            f"  тАв  рдирд╛рдо: {user_info['full_name']}\n"
            f"  тАв  рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: `{user_info['user_id']}`\n"
            f"  тАв  рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо: {user_info['username']}"
        )
        formatted_message += details_text


        try:
            # Send profile picture if available
            if user_info['profile_pic_file_id']:
                await update.message.reply_photo(
                    photo=user_info['profile_pic_file_id'],
                    caption=formatted_message,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                # Fallback to sticker then text
                await update.message.reply_sticker(DEFAULT_JOIN_STICKER_ID)
                await update.message.reply_text(formatted_message, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e:
            logger.error(f"рд╕реНрд╡рд╛рдЧрдд рд╕реНрдЯрд┐рдХрд░ рдпрд╛ рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}")
            # Final fallback to just text if both fail
            await update.message.reply_text(formatted_message, parse_mode=ParseMode.MARKDOWN_V2) 

# LEFT MEMBER ANNOUNCEMENT
async def left_member_announcement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = update.message.left_chat_member
    chat = update.effective_chat

    if member.id == context.bot.id:
        # Bot was removed from the group, no need to announce its own departure
        logger.info(f"Bot was removed from chat {chat.id} ({chat.title})")
        return

    # Dynamic goodbye message variations
    goodbye_templates = [
        "ЁЯСЛ рдЕрд▓рд╡рд┐рджрд╛, *{fullname}*! рд╣рдореЗрдВ рдЙрдореНрдореАрдж рд╣реИ рдХрд┐ рдЖрдк рдлрд┐рд░ рд╕реЗ рдорд┐рд▓реЗрдВрдЧреЗ. ЁЯШе",
        "ЁЯТФ *{fullname}* рдиреЗ рд╕рдореВрд╣ рдЫреЛрдбрд╝ рджрд┐рдпрд╛. рд╣рдо рдЙрдиреНрд╣реЗрдВ рдпрд╛рдж рдХрд░реЗрдВрдЧреЗ. ЁЯШв",
        "ЁЯЪ╢тАНтЩВя╕П *{fullname}* рдиреЗ {chatname} рд╕реЗ рд╡рд┐рджрд╛ рд▓реА. рд╕реБрд░рдХреНрд╖рд┐рдд рд░рд╣реЗрдВ! ЁЯМЯ",
        "ЁЯЪк *{fullname}* рдЪрд▓рд╛ рдЧрдпрд╛. рд╡рд┐рджрд╛рдИ! ЁЯСЛ",
        "ЁЯШФ рдПрдХ рд╕рджрд╕реНрдп рдЪрд▓рд╛ рдЧрдпрд╛: *{fullname}*. рдЖрдкрдХреА рдХрдореА рдЦрд▓реЗрдЧреА."
    ]

    goodbye_message_text = random.choice(goodbye_templates)

    formatted_message = goodbye_message_text.replace("{first}", escape_markdown_v2(member.first_name))\
                                            .replace("{last}", escape_markdown_v2(member.last_name or ""))\
                                            .replace("{fullname}", escape_markdown_v2(member.full_name))\
                                            .replace("{chatname}", escape_markdown_v2(chat.title))

    # Add user's details for farewell
    details_text = (
        f"\n\n"
        f"ЁЯФЧ *рд╡рд┐рд╡рд░рдг:*\n"
        f"  тАв  рдирд╛рдо: {escape_markdown_v2(member.full_name)}\n"
        f"  тАв  рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: `{member.id}`\n"
        f"  тАв  рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо: {escape_markdown_v2(f'@{member.username}') if member.username else '_N/A_'}"
    )
    formatted_message += details_text

    try:
        await update.message.reply_text(
            formatted_message,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"рд╕рджрд╕реНрдп рдХреЗ рдЬрд╛рдиреЗ рдХрд╛ рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}")


# INFO COMMAND
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    target_user = None
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    elif context.args:
        try:
            user_id = int(context.args[0])
            target_chat_member = await context.bot.get_chat_member(chat.id, user_id)
            target_user = target_chat_member.user
        except ValueError:
            await update.message.reply_text(
                f"тЭМ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрд╛ рдПрдХ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        except Exception:
            await update.message.reply_text(
                f"тЭМ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдкреНрд░рджрд╛рди рдХреА рдЧрдИ ID рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдирд╣реАрдВ рдвреВрдБрдврд╛ рдЬрд╛ рд╕рдХрд╛ рдпрд╛ рдЙрдирдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рдХреА рдЬрд╛ рд╕рдХреА.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    else:
        target_user = user # If no target, show info about the command issuer

    if not target_user:
        await update.message.reply_text(
            f"ЁЯдФ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЙрдирдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдпрд╛ рдЙрдирдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    is_chat_admin = await is_admin_or_owner(update, context, chat.id, target_user.id)
    warn_data = warns_collection.find_one({"chat_id": chat.id, "user_id": target_user.id})
    warn_count = warn_data.get("warn_count", 0) if warn_data else 0

    user_info_display = await _get_user_display_info(target_user)

    user_info_text = (
        f"ЁЯСд *рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЬрд╛рдирдХрд╛рд░реА* ЁЯСд\n\n"
        f"тАв  *рдирд╛рдо:* {user_info_display['full_name']}\n"
        f"тАв  *рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID:* `{user_info_display['user_id']}`\n"
        f"тАв  *рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо:* {user_info_display['username']}\n"
        f"тАв  *рдмреЙрдЯ рд╣реИ:* {'рд╣рд╛рдБ' if target_user.is_bot else 'рдирд╣реАрдВ'}\n"
        f"тАв  *рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдПрдбрдорд┐рди рд╣реИ:* {'рд╣рд╛рдБ' if is_chat_admin else 'рдирд╣реАрдВ'}\n"
        f"тАв  *рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдЪреЗрддрд╛рд╡рдирд┐рдпрд╛рдБ:* `{warn_count}`\n\n"
        f"_рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЪреЗрддрд╛рд╡рдиреА рд╡рд┐рд╡рд░рдг рдХреА рдЬрд╛рдБрдЪ рдХреЗ рд▓рд┐рдП `/warns` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ._"
    )

    # Send profile picture if available, then text
    if user_info_display['profile_pic_file_id']:
        try:
            await update.message.reply_photo(
                photo=user_info_display['profile_pic_file_id'],
                caption=user_info_text,
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e:
            logger.error(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {target_user.id} рдХреЗ рд▓рд┐рдП рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рддрд╕реНрд╡реАрд░ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}")
            await update.message.reply_text(user_info_text, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text(user_info_text, parse_mode=ParseMode.MARKDOWN_V2)

# ID COMMAND
async def get_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        user_id = update.message.reply_to_message.from_user.id
        user_name = update.message.reply_to_message.from_user.full_name
        await update.message.reply_text(
            f"ЁЯСд *{escape_markdown_v2(user_name)}* рдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID: `{user_id}`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        user_id = update.effective_user.id
        user_name = update.effective_user.full_name
        await update.message.reply_text(
            f"ЁЯСд рдЖрдкрдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID, *{escape_markdown_v2(user_name)}*, рд╣реИ: `{user_id}`",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# --- Main Function to Run the Bot ---
async def main():
    try:
        app = ApplicationBuilder().token(TOKEN).build()
        logger.info("рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...")

        # Commands
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("kick", kick))
        app.add_handler(CommandHandler("ban", ban))
        app.add_handler(CommandHandler("mute", mute))
        app.add_handler(CommandHandler("unmute", unmute))
        app.add_handler(CommandHandler("warn", warn))
        app.add_handler(CommandHandler("warns", warns))
        app.add_handler(CommandHandler("unwarn", unwarn))
        app.add_handler(CommandHandler("resetwarns", unwarn)) # Alias for unwarn/resetwarns for simplicity
        app.add_handler(CommandHandler("id", get_user_id))
        app.add_handler(CommandHandler("chatid", get_chat_id))
        app.add_handler(CommandHandler("about", about))
        app.add_handler(CommandHandler("ping", ping))
        app.add_handler(CommandHandler("info", info)) # Added info command

        # Owner Only Commands (GLOBAL MODERATION)
        app.add_handler(CommandHandler("gban", gban))
        app.add_handler(CommandHandler("ungban", ungban))
        app.add_handler(CommandHandler("gblacklist", gblacklist))
        app.add_handler(CommandHandler("ungblacklist", ungblacklist))
        app.add_handler(CommandHandler("blacklist_list", blacklist_list))

        # Welcome/Rules - Admin/Owner restricted
        app.add_handler(CommandHandler("setrules", setrules))
        app.add_handler(CommandHandler("rules", rules))
        app.add_handler(CommandHandler("cleanrules", cleanrules))
        app.add_handler(CommandHandler("setwelcome", setwelcome))
        app.add_handler(CommandHandler("resetwelcome", resetwelcome))
        app.add_handler(CommandHandler("welcome", welcome))
        
        # New member and left member handlers
        app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_member_welcome))
        app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, left_member_announcement))


        # Message tool commands - admin restricted
        app.add_handler(CommandHandler("pin", pin))
        app.add_handler(CommandHandler("unpin", unpin))
        app.add_handler(CommandHandler("del", delete_message))
        app.add_handler(CommandHandler("purge", purge))
        app.add_handler(CommandHandler("cleanservice", cleanservice))
        app.add_handler(CommandHandler("autolink", autolink))


        # Auto link filter and fallback help in group chats
        app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_links))
        # This fallback_help should be the last MessageHandler for text in groups
        app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, fallback_help)) 
        
        # Run polling without closing the event loop.
        await app.run_polling(close_loop=False)

    except Exception as e:
        logger.error(f"рдореБрдЦреНрдп рдлрд╝рдВрдХреНрд╢рди рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")

# --- Launcher ---
async def launch():
    try:
        await main()
    except Exception as e:
        print(f"рдмреЙрдЯ рдХреНрд░реИрд╢ рд╣реЛ рдЧрдпрд╛: {e}", file=sys.stderr)

if __name__ == "__main__":
    try:
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(main())
        except RuntimeError:
            new_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(new_loop)
            new_loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рджреНрд╡рд╛рд░рд╛ рдмреЙрдЯ рд░реЛрдХрд╛ рдЧрдпрд╛.", file=sys.stderr)
    except Exception as e:
        print(f"рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдХреЗ рджреМрд░рд╛рди рдПрдХ рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}", file=sys.stderr)
